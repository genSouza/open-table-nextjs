import Header from "./components/Header";
import SearchSidebar from "./components/SearchSidebar";
import RestaurantCard from "./components/RestaurantCard";
import { Cuisine, PRICE, Restaurant, Location, Review } from "@prisma/client";
import { prisma } from "../db/prisma";

export const metadata = {
  title: "Search restaurants OpenTable",
  description: "Generated by create next app",
  content: "width=device-width, initial-scale=1",
};

interface SearchParams {
  city?: string;
  cuisine?: string;
  price?: PRICE;
}
const select = {
  id: true,
  name: true,
  main_image: true,
  price: true,
  cuisine: true,
  location: true,
  slug: true,
  reviews: true,
};

const fetchRestaurantsByCity = async (
  searchParams: SearchParams
): Promise<
  {
    id: string;
    name: string;
    main_image: string;
    price: PRICE;
    cuisine: Cuisine;
    location: Location;
    slug: string;
    reviews: Review[];
  }[]
> => {
  if (!searchParams) return await prisma.restaurant.findMany({ select });

  const where: any = {};

  if (searchParams.city) {
    const location = {
      name: {
        equals: searchParams.city.trim().toLowerCase(),
      },
    };
    where.location = location;
  }

  if (searchParams.cuisine) {
    const cuisine = {
      name: {
        equals: searchParams.cuisine.trim().toLowerCase(),
      },
    };
    where.cuisine = cuisine;
  }

  if (searchParams.price) {
    const price = {
      equals: searchParams.price,
    };
    where.price = price;
  }

  const restaurants = await prisma.restaurant.findMany({
    where,
    select,
  });

  if (!restaurants) throw new Error("No restaurants found");

  return restaurants;
};

const fetchLocations = async (): Promise<Location[]> => {
  return await prisma.location.findMany();
};

const fetchCuisines = async (): Promise<Cuisine[]> => {
  return await prisma.cuisine.findMany();
};

const Search = async ({
  searchParams,
}: {
  searchParams: { city?: string; cuisine?: string; price?: PRICE };
}) => {
  const restaurants = await fetchRestaurantsByCity(searchParams);
  const locations = await fetchLocations();
  const cuisines = await fetchCuisines();
  return (
    <>
      <Header />
      <div className="flex items-start justify-between w-2/3 py-4 m-auto">
        <SearchSidebar
          locations={locations}
          cuisines={cuisines}
          searchParams={searchParams}
        />
        <div className="w-5/6">
          {restaurants.length ? (
            <>
              {restaurants.map((restaurant) => (
                <RestaurantCard key={restaurant.id} restaurant={restaurant} />
              ))}
            </>
          ) : (
            <p>No restaurants found</p>
          )}
        </div>
      </div>
    </>
  );
};

export default Search;
